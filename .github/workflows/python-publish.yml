# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# See also: https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/

name: Publish Python Package

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+a[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+b[0-9]+"
      - "[0-9]+.[0-9]+.[0-9]+rc[0-9]+"

# permissions:
#   contents: read

jobs:

  build:
    name: Build distribution
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    - name: Install prerequisites
      run: |
        python -m pip install --upgrade pip
    - name: 🛠️ Install dependencies
      run: |
        pip install -r requirements.txt
        # pip install -r requirements-dev.txt
    - name: Extract __version__
      id: extract-version
      run: |
        __VERSION__="$(python3 -c "import dimipy; print(getattr(dimipy,'__version__',''))")"
        echo '```python'                                 >> $GITHUB_STEP_SUMMARY
        echo "dimipy.__version__ = '$__VERSION__'" | tee -a $GITHUB_STEP_SUMMARY
        echo '```'                                       >> $GITHUB_STEP_SUMMARY
        [ -n "$__VERSION__" ] && echo "__VERSION__=$__VERSION__" >> $GITHUB_OUTPUT
    - name: Install pypa/build
      run: |
        python -m pip install --upgrade build
    - name: 📦 Build distributions
      run: |
        python -m build
    - name: 📤 Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    outputs:
      __VERSION__: ${{ steps.extract-version.outputs.__VERSION__ }}


  pypi-publish:
    name: Publish to PyPI
    needs:
    - build
    if: >-
      github.event_name == 'push'
      && startsWith(github.ref, 'refs/tags/')
    # && needs.build.outputs.__VERSION__ == github.ref_name
    env:
      __VERSION__: ${{ needs.build.outputs.__VERSION__ }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    environment:
      name: pypi
      url: https://pypi.org/project/dimipy/${{ needs.build.outputs.__VERSION__ }}

    steps:
    - name: 🚨 Assert __version__==TAG_NAME
      run: |
        echo "check that '$__VERSION__' == '$GITHUB_REF_NAME'"
        if [ -n "$__VERSION__" -a "$__VERSION__" != "$GITHUB_REF_NAME" ]; then
          echo 'Incompatible version tag `'"$GITHUB_REF_NAME"'.`' >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
    - name: 📥 Retrieve release distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: 📣 Publish release distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        skip-existing: true


  testpypi-publish:
    name: Publish to TestPyPI
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    environment:
      name: testpypi
      url: https://test.pypi.org/project/dimipy/${{ needs.build.outputs.__VERSION__ }}

    steps:
    - name: 📥 Retrieve release distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: 📣 Publish release distributions to testPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true


  github-release:
    name: Release on GitHub
    needs:
    - pypi-publish
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: 📥 Download release distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: ✍️ Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        "$GITHUB_REF_NAME"
        --repo "$GITHUB_REPOSITORY"
        --notes ""
    - name: 📣 Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        "$GITHUB_REF_NAME" dist/**
        --repo "$GITHUB_REPOSITORY"